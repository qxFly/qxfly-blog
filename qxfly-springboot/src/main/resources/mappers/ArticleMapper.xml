<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace等于mapper接口类的全限定名,这样实现对应 -->
<mapper namespace="fun.qxfly.mapper.Article.ArticleMapper">
    <insert id="releaseArticle" useGeneratedKeys="true" keyProperty="id">
        insert into article(title, content, preview, updateTime, createTime, tag, likes, views, authorId, author, cover,
                            classify,pub)
        VALUES (#{title}, #{content}, #{preview}, #{updateTime}, #{createTime}, #{tag}, #{likes}, #{views}, #{authorId},
                #{author}, #{cover}, #{classify},#{pub})
    </insert>
    <!--获取文章总量-->
    <select id="getArticleCount" resultType="int" >
        select count(a.id) from article a
        <where>
            <if test="authorId != 0">
                a.authorId = #{authorId}
            </if>
            <if test="searchData != '' ">
                and a.title like concat('%',#{searchData},'%')
            </if>
            <if test="classify != null and classify != ''">
                and a.classify = #{classify}
            </if>
            <if test="tagArr != null and tagArr != ''">
                <foreach collection="tagArr" item="t">
                    and a.tag like concat('%', #{t},'%')
                </foreach>
            </if>
            and verify = #{verify}
            <if test="pub != 0">
                and (pub = 11 or pub = 12)
            </if>

        </where>
    </select>
    <!--分页获取文章，可以进行搜索，如果传入userid则分页获取用户文章-->
    <select id="getArticlesByPage" resultType="fun.qxfly.common.domain.vo.ArticleVO">
        select * from article a left join not_passed_article npa on a.id = npa.aid
        <where>
            <if test="authorId != 0">
                a.authorId = #{authorId}
            </if>
            <if test="searchData != '' ">
                and a.title like concat('%',#{searchData},'%')
            </if>
            <if test="classify != null and classify != ''">
                and a.classify = #{classify}
            </if>
            <if test="tagArr != null and tagArr != ''">
                <foreach collection="tagArr" item="t">
                    and a.tag like concat('%', #{t},'%')
                </foreach>
            </if>
            and verify = #{verify}
            <if test="pub != 0">
                and (pub = 11 or pub = 12)
            </if>
        </where>
        <if test="sort == 'new'">
            order by a.createTime desc
        </if>
        <if test="sort == 'hot'">
            order by a.views desc
        </if>
        <if test="sort == 'likes'">
            order by a.likes desc
        </if>
    </select>
    <!--分页获取文章评论-->
    <resultMap id="comment" type="fun.qxfly.common.domain.entity.Comment">
        <id column="id" property="id"/>
        <result column="articleId" property="articleId"/>
        <result column="content" property="content"/>
        <result column="parentCommentId" property="parentCommentId"/>
        <result column="likeCount" property="likeCount"/>
        <result column="createTime" property="createTime"/>
        <result column="toUsername" property="toUsername"/>
        <result column="toUserId" property="toUserId"/>
        <result column="verify" property="verify"/>
        <association property="user" javaType="fun.qxfly.common.domain.entity.User">
            <id column="userId" property="id"/>
            <result column="username" property="username"/>
            <result column="avatar" property="avatar"/>
        </association>
    </resultMap>
    <select id="getArticleCommentsByPage" resultMap="comment">
        select c.*,u.avatar from comment c join `user` u on u.id = c.userId where c.articleId = #{id} and c.verify = 3
        and parentCommentId = 0
        <if test="sort == 'new'">
            order by c.createTime desc
        </if>
        <if test="sort == 'hot'">
            order by c.likes desc
        </if>
        limit #{start}, #{pageSize}
    </select>
    <select id="getChildCommentByCommentId" resultMap="comment">
        select c.*,u.avatar from comment c join `user` u on u.id = c.userId where parentCommentId = #{id} and c.verify = 3 order by c.createTime ASC
    </select>
    <!--获取用户收藏-->
    <select id="getUserCollection" resultType="fun.qxfly.common.domain.vo.ArticleVO">
        select a.* from article a, user_collection uc
        <where>
            uc.uid = #{uid} and uc.aid = a.id
            <if test="searchData != '' ">
                and a.title like concat('%',#{searchData},'%')
            </if>
        </where>
        <if test="sort == 'newC'">
            order by uc.collectionTime desc
        </if>
        <if test="sort == 'new'">
            order by a.createTime desc
        </if>
        <if test="sort == 'hot'">
            order by a.views desc
        </if>
        <if test="sort == 'likes'">
            order by a.likes desc
        </if>
    </select>
    <select id="listClassifiesByPage" resultType="fun.qxfly.common.domain.entity.Classify">
        select * from classify
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="name != null &amp;&amp; name != ''">
                and name like concat('%',#{name},'%')
            </if>
        </where>
    </select>
    <select id="listTagsByPage" resultType="fun.qxfly.common.domain.entity.Tag">
        select * from tag
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="name != null &amp;&amp; name != ''">
                and name like concat('%',#{name},'%')
            </if>
            <if test="uid != null &amp;&amp; name != 0">
                and uid = #{uid}
            </if>
        </where>
    </select>
</mapper>